From a csv file, we need to locate shared (same) gene pairs between a structure, and export those along with the unique pairs
Export to csv

Options GoLang, Java.

GoLang offers faster parsing than Java, but Java has more mobility in terms of moving to different systems. 

1. Search the folder for .csv files. 
2. Once a .csv file is found, start a goroutine that parses the .csv file. 
	2.1. Each goroutine seperates the columns, and the second and third column contains the gene pairs
	2.2. Sort each pair so that we can search for dupes (e.x. gene1,gene2 is a dupe of gene2,gene1)
	2.3. Ignore any dupes and store pairs in a hashset
3. Store all parsed .csv files into their own struct, and store all of them in a map that maps their id to their values
4. For each .csv in a map, go through the values and add them to a hashset, if the value is already there, add them to a map that contains their frequency
	4.1. If its already in the map, then just add to their frequency 
5. Also add the value to another map that contains the structure id that contains it
	5.1. If the gene pair is discovered to be a duplicated one down the line, then remove it from the map
6. Export the unique and shared pairs to a .csv file 
	6.1. Shared: gene1,gene2,frequeny


Pt. 2

When I have to make seperate CSV files for each unique structure pairs

1. Create copy of the map of csv files,
2. Iterate through the csv file map
	2.1. Create a structure pair, then at the end of the loop remove said structure pair to avoid duplicate pairs 
3. For each structure pair, create a csv file relating to each structure id name
	3.1. Search for shared pairs using goroutines and channels

